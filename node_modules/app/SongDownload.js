var Song = require('./Song'),
    ffmpeg = require('fluent-ffmpeg'),
    ffmetadata = require('ffmetadata'),
    youtubeStream = require('youtube-audio-stream'),
    fs = require('fs'),
    request = require('request');

module.exports = function SongDownload(array, options, callback, progress) {
    options.directory = options.directory || "";
    if (options.directory[options.directory.length - 1] !== "\\")
        options.directory = options.directory + "\\";

    var waiting = array.length;
    var all = array.length;

    array.forEach(function (song) {
        songDownloadSingle(song, options, function (err) {
            waiting--;
            console.log("Downloaded " + (all - waiting) + "/" + all + "(" + song.title + ")")
            progress((all - waiting) * 100 / all);
            if (waiting === 0)
                callback();
        });
    })
};

function donwloadSong() {
    var that = this;

    that._query = {
        artist: "",
        title: "",
        album: "",
        tags: "",
        url: ""
    };

    that._options = {
        folder: ""
    };

    that.song = new Song();

    return that;
}

donwloadSong.prototype.query = function Query(query) {
    this.song.query(query);
    return this;
};

donwloadSong.prototype.options = function Options(options) {
    this.song.options(options);
    return this;
};

donwloadSong.prototype.getData = function GetData(callback) {
    this.song.getData(callback);
    return this;
};


function songDownloadSingle(query, options, callback) {
    new Song(query)
        .getData(function (err, song) {
            if (err) {
                if (options.trace)
                    console.log(song.title + ": " + err);
                callback(err);
                return;
            }
            var stream = youtubeStream(song.url);
            new ffmpeg({source: stream})
                .format('mp3')
                .save(options.directory + song.filename)
                .on('start', function () {
                    if (options.trace) console.log(song.title + ": Starting downloading");
                    if (options.trace) console.log(song.title + ": " + song.url);
                })
                .on('error', function (err) {
                    if (options.trace)
                        console.log('Cannot process audio: ' + err.message);
                    if (err.message === "Cannot find ffmpeg")
                        if (options.trace)
                            console.log("Visit http://www.ffmpeg.org/ to download and install ffmpeg");
                    callback(err);
                })
                .on('end', function () {

                    if (options.trace)
                        console.log(song.title + ": Downloaded");

                    request(song.thumbnail)
                        .pipe(fs.createWriteStream(options.directory + song.id + '.jpg'))
                        .on('close', function () {
                            if (options.trace)
                                console.log(song.title + ": Writing metadata");
                            ffmetadata.write(options.directory + song.filename, song.raw, {
                                    attachments: [options.directory + song.id + '.jpg'],
                                    "id3v2.3": true
                                }, function (err) {
                                    if (err && options.trace) {
                                        console.error(song.title + ": Error writing metadata", err);
                                        callback(err);
                                    }
                                    else {
                                        if (options.trace)
                                            console.log(song.title + ": Metadata written");
                                        fs.unlink(options.directory + song.id + '.jpg');
                                        callback(null);
                                    }
                                }
                            );
                        });
                });
        });
};
