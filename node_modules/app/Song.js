var youtubeSearch = require('./YoutubeSearch'),
    _ = require('lodash'),
    Q = require('q'),
    eventEmmiter = require('events').EventEmitter,
    ffmpeg = require('fluent-ffmpeg'),
    ffmetadata = require('ffmetadata'),
    youtubeStream = require('youtube-audio-stream'),
    fs = require('fs'),
    request = require('request');

module.exports = function Song() {
    var that = this;

    that.data = {
        artist: "",
        title: "",
        album: "",
        tags: "",
        url: "",
        thumbnail: ""
    };

    that._options = {

    };

    return that;
};

module.exports.prototype = Object.create(eventEmmiter.prototype);

Object.defineProperty(module.exports.prototype, 'filename', {
    get: function () {
        var tags = this.data.tags ? " (" + this.data.tags + ")" : "";
        var artist = this.data.artist ? this.data.artist + " - " : "";
        return artist + this.data.title + tags + ".mp3";
    }
});

Object.defineProperty(module.exports.prototype, 'search', {
    get: function () {
      var tags = this.data.tags ? " (" + this.data.tags + ")" : "";
      var artist = this.data.artist ? this.data.artist + " - " : "";
      return artist + this.data.title + tags;
    }
});

module.exports.prototype.setData = function (data) {
  _.assign(this.data, data);
  return this;
};

module.exports.prototype.raw = function () {
    return _.pick(that, ['artist', 'title', 'album']);
};

module.exports.prototype.query = function (query) {
    _.assign(this.data, query);
    return this;
};

module.exports.prototype.options = function (options) {
    _.assign(this._options, options);
    return this;
};

module.exports.prototype.getData = function () {

    var that = this;

    if (_.isUndefined(that.data.title)) {
        that.emit('error', new Error("Missing title"));
        return;
    }

    if (!_.isUndefined(that.data.url))
        if (!_.isUndefined(youtube_parser(that.data.url))) {
            that.data.thumbnail = "https://i.ytimg.com/vi/" + youtube_parser(that.data.url) + "/hqdefault.jpg";
            that.emit('data', that.data);
            return;
        }

    new youtubeSearch()
        .query(that.search)
        .options({
            maxResults: 10,
            startIndex: 1
        })
        .search()
        .then(function (results) {
            that.data.url = results[0].url;
            that.data.thumbnail = "https://i.ytimg.com/vi/" + youtube_parser(that.data.url) + "/hqdefault.jpg";
            that.emit('data', that.data);
        })
        .catch(function (error) {
            that.emit('error', error);
        })
        .done();

    return that;
};

module.exports.prototype.download = function () {

    var that = this;

    if (!that.data.url) {
        that.emit('error', new Error("Download url misssing. Did you invoke download before getData?"));
        return;
    }

    that.emit('progress', 10);

    var stream = youtubeStream(this.data.url);
    new ffmpeg({source: stream})
        .format('mp3')
        .save(that._options.directory + "\\" + that.filename)
        .on('error', function (err) {
            that.emit('error', err);
            return;
        })
        .on('data', function (data) {
            that.emit('data', data);
        })
        .on('end', function () {
            that.emit('progress', 50);
            request(that.data.thumbnail)
                .pipe(fs.createWriteStream(that._options.directory + "\\" + youtube_parser(that.data.url) + '.jpg'))
                .on('close', function () {
                    that.emit('progress', 95);
                    ffmetadata.write(that._options.directory + "\\" + that.filename, that.data, {
                            attachments: [that._options.directory + "\\" + youtube_parser(that.data.url) + '.jpg'],
                            "id3v2.3": true
                        }, function (err) {
                            if (err) {
                                that.emit('error', err);
                                return;
                            }
                            else {
                                fs.unlink(that._options.directory + "\\" + youtube_parser(that.data.url) + '.jpg');
                                that.emit('done', that.data);
                            }
                        }
                    );
                });
        });

    return that;
};


function youtube_parser(url) {
    var regExp = /.*(?:youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=)([^#\&\?]*).*/;
    var match = url.match(regExp);
    if (match && match[1].length == 11) {
        return match[1];
    }
}